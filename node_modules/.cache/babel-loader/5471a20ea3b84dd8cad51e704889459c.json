{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      valuue: event.target.value\n    });\n\n    const inputBlurHandler = event => {\n      dispatch({\n        type: 'BLUR'\n      });\n    };\n\n    const reset = () => {\n      dispatch({\n        type: 'RESET'\n      });\n    };\n\n    return {\n      value: enteredValue,\n      isValid: valueIsValid,\n      hasError,\n      valueChangeHandler,\n      inputBlurHandler,\n      reset\n    };\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/hcove/OneDrive/Desktop/launchcode_work/UdemySection16/src/hooks/use-input.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","type","valuue","target","inputBlurHandler","reset","enteredValue","isValid"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAI;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,SAAS,EAAE;AAFY,CAA3B;;AAKA,MAAOC,iBAAiB,GAAE,CAACC,KAAD,EAAQC,MAAR,KAAoB;AAC1C,SAAOF,iBAAP;AACC,CAFL;;AAKA,MAAMG,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAwBV,UAAU,CAACI,iBAAD,EAAoBH,iBAApB,CAAxC;AAEA,QAAMU,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACP,KAAZ,CAAlC;AACA,QAAMU,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACN,SAA7C;;AAEA,QAAMU,kBAAkB,GAAIC,KAAD,IAAW;AAClCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,MAAM,EAAEF,KAAK,CAACG,MAAN,CAAaf;AAArC,KAAD,CAAR;;AAEJ,UAAMgB,gBAAgB,GAAIJ,KAAD,IAAW;AAChCJ,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACG,KAFP;;AAIA,UAAMI,KAAK,GAAG,MAAM;AAChBT,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACD,KAFH;;AAIA,WAAO;AACNb,MAAAA,KAAK,EAAEkB,YADD;AAENC,MAAAA,OAAO,EAAEV,YAFH;AAGNC,MAAAA,QAHM;AAINC,MAAAA,kBAJM;AAKNK,MAAAA,gBALM;AAMNC,MAAAA;AANM,KAAP;AAQC,GAnBD;AAoBH,CA1BD;;GAAMZ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useReducer } from 'react';\r\n\r\nconst initialInputState =  {\r\n    value: '',\r\n    isTouched: false\r\n};\r\n\r\nconst  inputStateReducer =(state, action) =>  { \r\n    return inputStateReducer;\r\n    };\r\n\r\n\r\nconst useInput = (validateValue) => {\r\n    const [inputState, dispatch] =useReducer(inputStateReducer, initialInputState)\r\n\r\n    const valueIsValid = validateValue(inputState.value);\r\n    const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n    const valueChangeHandler = (event) => {\r\n        dispatch({type: 'INPUT', valuue: event.target.value});\r\n\r\n    const inputBlurHandler = (event) => {\r\n        dispatch({type: 'BLUR'})\r\n          };\r\n        \r\n    const reset = () => {\r\n        dispatch({type: 'RESET'})\r\n      };\r\n\r\n    return {\r\n     value: enteredValue, \r\n     isValid: valueIsValid,\r\n     hasError,\r\n     valueChangeHandler,\r\n     inputBlurHandler,\r\n     reset\r\n        };\r\n    };\r\n};\r\n\r\n\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}